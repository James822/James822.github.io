<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/styles.css">
    <script type="text/javascript" id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
    </script>
    <title>Blog of James Spratt</title>
  </head>
  <body>
    
    <div class="blog_header">
      <div class="blog_title">
	<a style="color: inherit; text-decoration: none;" href="/index.html">Blog of James Spratt</a>
      </div>
      <hr style="width:485px; border: 1px solid hsl(202, 12%, 20%);">
      <div class="header_text">
	<div style="flex: 0 0 80px; color: hsl(202, 15%, 35%);">|</div>
	<div style="flex: 0 0 80px"><a style="color: inherit;" href="/index.html">Categories</a></div>
	<div style="flex: 0 0 80px; color: hsl(202, 15%, 35%);">|</div>
	<div style="flex: 0 0 80px"><a style="color: inherit;" href="/project_page.html">Projects</a></div>
	<div style="flex: 0 0 80px; color: hsl(202, 15%, 35%);">|</div>
	<div style="flex: 0 0 80px"><a style="color: inherit;" href="/about_page.html">About</a></div>
	<div style="flex: 0 0 80px; color: hsl(202, 15%, 35%);">|</div>
      </div>
    </div>


    <div class="main_section">
      
      <!-- <div class="panel_body"> -->
      <!-- 	<div class="panel_inner"> -->
      <!-- 	  <span class="divider">|</span> -->
      <!-- 	  <a href="index.html">Recent Posts</a> -->
      <!-- 	  <span class="divider">|</span> -->
      <!-- 	  <a href="categories_page.html">Post Categories</a> -->
      <!-- 	  <span class="divider">|</span> -->
      <!-- 	  <a href="index.html">Projects</a> -->
      <!-- 	  <span class="divider">|</span> -->
      <!-- 	  <a href="about_page.html">About</a> -->
      <!-- 	  <span class="divider">|</span> -->
      <!-- 	</div> -->
      <!-- </div> -->

      <div class="post_title">
  <div class="post_title_heading">Creating an X11 Window and OpenGL Context on Linux</div>
  <div class="post_title_subtext">2025 Mar 18, James Spratt</div>
  <div class="post_title_subtext">Category: <a href="/index.html">Programming</a></div>
</div>

<!-- TODO: -->
<!-- - write all functions in the main loop out and then fill them in individually to keep things structured and organized -->
<!-- - provide your source code as a pastebin downloadable or something -->
<!-- - get Jesse to run the code and test to make sure it works -->

<div class="post_body">
  <p>Let me start off by saying that it's not that difficult to open a native window with no libraries or other extra help. Sure, it's not as easy as using a library like SDL, but it's also not so complicated that you can't at least understand how it works. Don't get me wrong, I'm all for SDL and other similar libraries such as GLFW, but it's certainly a good thing to at least understand how these libraries operate.</p>

  <p>Chances are that if you're here, you're already pursuing something plenty difficult enough that manually opening a native window and creating an OpenGL context is not something that deters you anyways. I still emphasize that it is not difficult to do so. I also consider the proposition that doing this is a "waste of time" to be an absurd proposition that only comes from a place of ignorance, and is perpetrated by people who clearly haven't done it themselves.</p>

  <p>In fact, this generally negative attitude towards "low-level" programming among the software people community is the exact reason why documentation is generally scarce on this subject, nprecisely because very few people actually know how to do this kind of thing manually, and even fewer have the time to teach others how to do the same. It's quite sad that new and curious programmers are discouraged to delve into native programming by so-called "senior software engineers", who themselves only issue these warnings out of their own ignorance and incompetence.</p>

  <p>I say at once dispel with this idiotic notion, and be as curious as you possibly can, as the only danger to you will be an increase in your knowledge and skill as a developer. So enough about that.</p>

  <p>Also, an important reason why I am making this tutorial is because the existing tutorials surrounding this subject are both sparse and also full of error. I claim to have found many important errors that would set back new developers quite a bit, and I'll go over exactly what these errors are in this tutorial. Still, I'm grateful for the tutorials that exist and have referenced them extensively in this post.</p>

  <p>Alright, let's actually get into to it!</p>

  <!-- <p>This tutorial will teach you how to:</p> -->
  <!-- <ul> -->
  <!--   <li>Use X11 via Xlib</li> -->
  <!--   <li>Use GLX (the OpenGL extension to X11) to create an OpenGL context (and a few other things)</li> -->
  <!--   <li>Load GLX extension functions, and also load OpenGL functions; via glXGetProcAddress</li> -->
  <!--   <li>Open a basic hello triangle on linux</li> -->
  <!-- </ul> -->
  
  <div class="he">X11 & GLX</div>
  <p>To talk about opening a native window on any platform we need to understand what the native windowing system is. In the case of Microsoft *Windows*, the windowing systems is built into the general platform API known as win32. In the case of linux, windowing systems are seperate from the kernel (properly speaking, seperate from linux itself), but the most widely used windowing system is X11 by far. Wayland is another option, but I won't be touching that.</p>

  <p>X11, or <i>The X Window system</i> is a bitmap display system based on a client-server architecture with a specified protocol called the "X Protocol". Applications communicate to the X Sever (which may be on the same device, or across a network) with commands to peform actions.</p>

  <p>Programming X11 is therefore writing a client application that can communicate with an X11 server, via the X Protocol. Typically, the X sever is on the same device as the client, and in fact we will be counting on that in our OpenGL application as we don't want to consider networked graphics applications.</p>

  <p>It is technically within possibility to learn the X Protocol and manually implement it within your client application, but this is beyond what I would consider practical. Rather than that, Xlib is provided for us as a C library that implements the X Protocol so that we can communicate between server and client with an API interface. This is the option I will be going with for this tutorial, but the X protocol is standardized and you absolutey could go look at it for yourself.</p>

  <p>In order to create and use an OpenGL context, we will need to an extension to X11/Xlib called <b>GLX</b>, or the "OpenGL extension to the X Window System", which is what allows us to create a framebuffer and use it within an OpenGL context. If we were on windows, we would use win32/WGL. GLX is what allows us to do most of the important work to link our X11 Window and OpenGL context so that we can start doing graphics rendering.</p>


  
  <div class="he">Documentation for X11/Xlib and GLX</div>
  <p>It's important to be aware of the documentation for the two main APIs involved here, X11/Xlib, and GLX, of which GLX is really just an API extension to Xlib.</p>

  <p>Unfortunately, the documentation for creating a window and GL context with Xlib/GLX is rather spread out all over the place. Further, the documentation that does exist is poor and outdated in some areas, which is part of the motivation for me making this tutorial.</p>

  <p>The Xlib documentation is found here: <a href="https://www.x.org/wiki/ProgrammingDocumentation/">https://www.x.org/wiki/ProgrammingDocumentation/</a>, and the GLX documentation is found within the Khronos OpenGL registry here: <a href="https://registry.khronos.org/OpenGL/index_gl.php">https://registry.khronos.org/OpenGL/index_gl.php</a>. Even though GLX is a library extension to Xlib, it is listed in the OpenGL Registry which can be somewhat confusing. Out of all the documentation cited in this post, GLX is easily the worst, so I'll do my best to explain it. You should really grab the documentation for Xlib, GLX, and also the OpenGL core spec as well, which can also be found in the Khronos OpenGL registry.</p>

  <p>If you're serious about proper software development, then you need to always have the proper documentation for whatever system you are interacting with. You shoul</p>


  <div class="he">Starter Program and Compilation with GCC</div>
  <p>I'm going to be compiling with GCC and be using C, but you can also follow along in C++ with only a few modificaitions. If you read the Xlib documentation you'll note that most functions are provided as Macros, this is exactly so that either C or C++ can use the macro and get the right function. I just call the functions directly personally.</p>

  <p>Anyways, start with this C code, and name it something like "x11_window.c":</p>

<div class="code_block">#include &lt;stdio.h&gt;

int main()
{
      printf("Hello World!\n");
      return 0;
}</div>


  <p>then, compile with this command:</p>

<div class="code_block">gcc x11_window.c -o x11_window</div>

  <p>run it with:</p>

  <div class="code_block">./x11_window</div>

  <p>and you should get "Hello World!" as output.</p>

  <p>Also, at the end of the main function add a cleanup section like this:</p>

  <div class="code_block">#include &lt;stdio.h&gt;

int main()
{
      printf("Hello World!\n");


 CLEANUP_AND_EXIT:
      return 0;
}</div>

  <p>for now the cleanup section just returns from the function. We'll be referring back this cleanup section later.</p>


  
  <div class="he">Setting up X11 Display</div>
  <p>The first task is to open a connection to the X11 Display Server, the <i>X Server</i>. If no server exists on the host machine (or on the network if we specify a device across the network), then this will fail and we will have no way of displaying anything. We NEED an X server to have an X window, so either prompt the user to install/run the X server or something else.</p>

  <p>Anyways, we can open a connection to the X server and get a Display back:</p>

    <div class="code_block">/* @@ opening connection to X server */
Display* display = NULL;
int display_exists = FALSE;
int default_screen_id = 0;

display = XOpenDisplay(NULL);
if(display == NULL) {
      printf("ERROR: failed to open X11 display, display name: \"%s\"", XDisplayName(NULL));
      goto CLEANUP_AND_EXIT;
} else {
      display_exists = TRUE;
      default_screen_id = XDefaultScreen(display);
}
/* @! */</div>

  <p>make sure to also have <span class="code_inline">#include &lt;X11/Xlib.h&gt;</span> and also link to X11 with GCC by adding the flag: <span class="code_inline">-lX11</span></p>

  <p>This code snippet opens a connection to the X Server, and if it succeeds, also grabs the screen ID which we will need later.</p>

  <p>In the cleanup section, we need to close the display with <span class="code_inline">XCloseDisplay()</span> like this:</p>

<div class="code_block">     /* @@ cleanup and program exit */
CLEANUP_AND_EXIT:
     if(display_exists == TRUE) {
	   XCloseDisplay(display);
     }

     return 0;
     /* @! */</div>

  <p>And this will.</p>

  <div class="he">Setting up GLX</div>
  <p></p>

  <div class="he">Checking for GLX extensions</div>
  <p></p>

  <div class="he">Loading GLX extension procedures</div>
  <p></p>

  <div class="he">Selecting GLX framebuffer config</div>
  <p></p>

  <div class="he">Creating an X11 Window and GLX Window</div>
  <p></p>

  <div class="he">Creating a GLX Context (OpenGL context) and making it current</div>
  <p></p>

  <div class="he">Loading OpenGL procedures</div>
  <p>After we are done, we have finally accomlishj the ned. For example still:</p>

  <div class="he">Configuring Window/Framebuffer Settings</div>
  <p></p>

  <div class="he">Basic OpenGL Hello Triangle</div>
  <p>As an example, just to prove that this whole tutorial does indeed work, let us setup a basic hello triangle draw. I will not write code for this correctly or explain how that works as that is out of the scope of this tutorial, see: learnopengl as an excelletn resource for learning how to do this stuff:</p>  

  

  <div class="he">Creating a window with X11</div>
  <p>First, we need to setup some</p>

<div class="code_block">int main()
{     
   KPL_Print_Platform_Info();

   /* @@ window system init */    

   #define TRUE 1
   #define FALSE 0

   Display* display = NULL;
   Window window = 0;
   GLXContext glx_context = NULL;

   u32 window_exists = FALSE;
   u32 display_exists = FALSE;
   u32 glx_context_exists = FALSE;

   Window parent_window = 0;
   int default_screen_id = 0;
   GLXFBConfig best_fb_config;
  
   return 0;
}</div>

<p>Then, do this:</p>

<div class="code_block">int __MAIN__()
{
   /* @@ window system init */    

   Display* display = NULL; u32 display_exists = 0; /* 1 is exists, 0 is does not exist */
   Window window = 0; u32 window_exists = 0; /* 1 is exists, 0 is does not exist */
   GLXContext glx_context = NULL; u32 glx_context_exists = 0; /* 1 is exists, 0 is does not exist */
   Window parent_window = 0;
   int default_screen_id = 0;
   GLXFBConfig best_fb_config;

   display = XOpenDisplay(NULL);
   if(display == NULL) {
   }
   display_exists = 1;
   default_screen_id = XDefaultScreen(display);

   /* @@ glx setup */
   int error_base;
   int event_base;
   if(glXQueryExtension(display, &error_base, &event_base) == False) {
   }

   int glx_major_version;
   int glx_minor_version;
   if(glXQueryVersion(display, &glx_major_version, &glx_minor_version) == False) {
   }
   if( glx_major_version < 1 || (glx_major_version == 1 && glx_minor_version < 4) ) {
   }
}</div>

<p>You can compile the code with gcc like this:</p>

<div class="code_block">gcc -Wall main.c -o main</div>



<!-- <div class="code_block"><pre> -->
<!-- Pictures/ -->
<!-- -\-> 2025/ -->
<!--     -\-> Italy_Wedding_02 -->
<!--     -\-> Italy_Wedding_01 -->
<!--     -\-> Portual_trip_02 -->
<!--     -\-> Portual_trip_01 -->
<!--     -\-> Vancouver_03 -->
<!-- -\-> 2024/ -->
<!--     -\-> Vancouver_02 -->
<!--     -\-> Vancouver_01 -->
<!--     -\-> Paris_03 -->
<!-- -\-> 2023/ -->
<!--     -\-> Paris_02 -->
<!--     -\-> Paris_01 -->
<!-- </pre></div> -->

<div class="he">References</div>
<ul>
  <li>Khronos OpenGL registry (GLX spec is available here): <a href="https://registry.khronos.org/OpenGL/index_gl.php">https://registry.khronos.org/OpenGL/index_gl.php</a></li>
  <li>Xorg/Xlib Documentation: <a href="https://www.x.org/wiki/ProgrammingDocumentation/">https://www.x.org/wiki/ProgrammingDocumentation/</a></li>
  <li>Khronos Opengl Context Creation Tutorial: <a href="https://www.khronos.org/opengl/wiki/Tutorial:_OpenGL_3.0_Context_Creation_(GLX)">https://www.khronos.org/opengl/wiki/Tutorial:_OpenGL_3.0_Context_Creation_(GLX)</a></li>
  <li>Tutorial by <a href="https://github.com/ColleagueRiley">ColleagueRiley</a> on Window/GL context creation: <a href="https://github.com/ColleagueRiley/OpenGL-Context-Creation">https://github.com/ColleagueRiley/OpenGL-Context-Creation</a></li>
  <li>Tutorial by <a href="https://apoorvaj.io/">Apoorva Joshi</a>, also on Window/GL context creation:<a href="https://apoorvaj.io/creating-a-modern-opengl-context/">https://apoorvaj.io/creating-a-modern-opengl-context/</a></li>
  <li>Khronos tutorial on loading OpenGL functions: <a href="https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions">https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions</a></li>
  <li>The amazing and classic learnOpenGL tutorial: <a href="https://learnopengl.com/">https://learnopengl.com/</a></li>
</ul>

- there's two functions for getting pointers to procedures, glXGetProcAddressARB() and glXGetProcAddress(), and it might be confusing as to which we should use. According to this documentation: https://registry.khronos.org/OpenGL/extensions/ARB/GLX_ARB_get_proc_address.txt, "Implementations must export the glXGetProcAddressARB entry point statically.", and in the case of GLX we have the function glXGetProcAddress(). So according to this documentation, it seems like glXGetProcAddress() and glXGetProcAddressARB() are the same.

If you're interested, there's a really old post on some linux/MESA wiki about this subject, but some of the information is very outdated: https://dri.freedesktop.org/wiki/glXGetProcAddressNeverReturnsNULL/. This documentation was most likely written before modern openGL, but there are some useful pieces of advice in there. Just keep in mind that as long as we use GLX 1.4, then we are gaurneteed to have glXGetProcAddress(). Not only that, but we actually NEED GLX 1.4 because the GLX_ARB_create_context/GLX_ARB_create_context_profile extensions require GLX 1.4, and we need these extension to get a modern openGL context, which is what this tutorial is for as I don't think anyone these days wants a pre-modern OpenGL context.

In fact, the GLX documentation says that the glXGetProcAddress() function is "promoted" from the glXGetProcAddressARB() extension function which basically means that the glXGetProcAddress() is the better one to use (since GLX 1.4). Considering tha

- GLX provides the function glXCreateWindow() function, but this seems to be useless as a GLXDrawable is a union that includes normal X11 Windows. Every GLX function that takes in a GLXDrawable also takes in a normal X11 Window. This is not correct, it's not useless and in fact I have 3 piecies of evidence. For one, I have a github GLFW source code amendment: https://github.com/glfw/glfw/issues/507, and I also have swap control extension docs in the additions to GLX 1.4 section: https://registry.khronos.org/OpenGL/extensions/EXT/EXT_swap_control.txt. THe third piece of evidence is that using a normal X window on my machine proved to be errnouse just like the khronos docs suggested, and using a GLXWindow was correct.

I think you actually should use a GLXWindow rather than a normal X Window, it's technically correct but maybe nobody does it and still gets away with it. The practical reason is that according to the GLX_EXT_swap_control_tear (and also GLX_EXT_Swap_control) doc, found here: https://registry.khronos.org/OpenGL/extensions/EXT/GLX_EXT_swap_control_tear.txt, in the "Additions to the GLX 1.4 Specification" that "The value returned by glXQueryDrawable is undefined if the drawable is not a GLXWindow and these attributes are given.". Even though glXQueryDrawable() takes in a GLXDrawable and NOT a GLXWindow, the extension docs here suggest that it would result in undefined behaviour if we used a normal X Window (which would compile) and not a GLXWindow. In any case, it's safer to just use a GLXWindow. In fact, in my tests I got 0 with a normal X window for both the max swaps and also the negative interval, basically, this just goes to show that you need to use a GLXWindow. Using the GLXSwapBuffers() function won't work either.

- Technically, the function: glXGetProcAddressARB() can query itself to see if it is supported, as this function is also an extension to GLX. But how can we query glXGetProcAddressARB() if we need it to query itself? Therefore, this function is provided statically with a slightly different name: glXGetProcAddress() by GLX so that we can query extensions to GLX. See this documentation for more details: https://registry.khronos.org/OpenGL/extensions/ARB/GLX_ARB_create_context.txt

- The GLX 1.4 documentation is outdated and flawed in many ways. It appears that the maintainers have giving up on updating it since probably the early 2010s. For example, this documentation here: https://registry.khronos.org/OpenGL/extensions/EXT/GLX_EXT_swap_control_tear.txt suggests edits and additions to the GLX 1.4 spec that are not actually present. If you grab the latest GLX 1.4 spec you won't find these additions or changes anywhere. There are several other examples where these proposed "additions" are not to be found anywhere with the GLX 1.5 spec found in the Khronos OpenGL registery. What this really means for use is that we just need to read the extension documentation alongside the GLX spec, which is not really that bad.

- Synchornizatoin is a difficult topic in general, and is beyond the scope of this tutorial. That being said, there are a lot of things you should be aware of. The GLX function glXSwapBuffers() performs an implicit glFlush(). Therefore, any subsquent GL commands will not be executed until the buffer swap is complete, typically sometime around vertical retrace. This all depends on what glXSwapIntervalEXT() is set to, is if it is set to a non-zero value then swapping will be delayed by some amount. Triple buffering is the most common solution to this problem, providing a second back-buffer that you can render to while the first back-buffer is being delayed for its swap with the front buffer. Triple-buffering may not necessarily be what you want, I would actually advocate quite the opposite with something called "Late Latching" where you try to render the game as close to the vertical retrace as possible, outlined in this article: https://developers.meta.com/horizon/blog/optimizing-vr-graphics-with-late-latching/. That being said, if the refresh-rate or frame-rate is high enough, even just something like 30hz-60hz, then it might suffice to render once per frame as soon as ready and then have glXSwapBuffers() wait to display it until the next vertical retrace. With adaptive vsync, the worst possible latency from completing render of back buffer to the swap is the time of the refresh rate itself, negative if we missed the vertical retrace. So with 60hz refresh rate, the worst case time would be (1/60)s ~= 16ms, but in reality it would be much lower than that because typically most games take a good portion of the frame time with CPU work, such as simulation (physics/game logic) and rendering prep, so the worst case time would be more like 10ms or even less. When we have higher refresh rates, such as 144hz, then the worst case time is (1/144)s ~= 7ms, and considering that the CPU will take up some of that 7ms, we are really only dealing with something like 2-4ms really (negative if we swap late with adaptive vsync). Adaptive v-sync is a critical tradeoff here because it prevents more than a whole frame of delay just to prevent screen tearing, but for responsive applications, it's better to have less latency and tearing for these odd frames. I've also heard (but not verified myself) that with high enough refresh rate (> 200hz or so) vertical retrace swap syncing is basically useless because the refresh rate is too fast for us to detect tearing. In this case, you just swap whenever you want at whatever rate you want and tearing wouldn't be visible. The issue with this is that the refresh rate will need to be very high, and most monitors at the time of writing this do not have a high enough refresh rate, so we still have to worry about v-sync and swap synchronization for years to come.

- As far as I can tell, there is no need to use glFinish() before a call to swap buffers as according to this link: https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync: "A call to the platform-specific buffer swapping function (such as SwapBuffers in Windows) means that, once all previously issued drawing commands have completed, the contents of the back buffer should be swapped into the front buffer. Exactly when that happens is subject to the swap interval setting." Despite the way this is worded, it is not the case that SwapBuffers will block until all previous commands have finished. In fact according to this poster: https://community.khronos.org/t/understanding-the-opengl-main-loop-swapbuffers/75593/6, SwapBuffers() may return right away, yt's even possible that the specific implemenation will queue up a whole other frame and therefore cause latency issues. If you put a glFlush() after the SwapBuffers(), then it will block until every GL command including the buffer swapping is complete, providing you with complete synchronization. If you do this however, then this thread will stall (as desired) which will prevent you from doing other work that you might want to do. In this case you could use other threads and leave this as the rendering thread, or some other synchronization method without glFinish().


If the interval is set to 1 (normal vsync), then it will swap it when the next vblank comes about. With the interval set to -1 (adaptive vysnc), if the vblank period is missed, then instead of waiting whole frame of time, it just displays it right away which will probably cause tearing but minimize latency.

- even the Krhonos wiki authors are unsure the difference between using glXGetProcAddress() and glXGetProcAddressARB(), so I just use the former and so far it's working out okay. I wasn't able to find any information that would suggest to prefer one over the other, besides the GLX documentatoin which claims that glXGetProcAddress() was promoted from the original extensoin function to glXGetProcAddressARB(), which would suggest to me that glXGetProcAddress() is better to use. In other words, the GLX documentation says that in GLX 1.4, the function was promoted from the GLX_ARB_get_proc_address extension to core GLX 1.4 functions. I suppose if you want to support pre-GLX 1.4 then you would want to consider using glXGetProcAddressARB().

- I think you actually should use a GLXWindow rather than a normal X Window, it's technically correct but maybe nobody does it and still gets away with it. The practical reason is that according to the GLX_EXT_swap_control_tear (and also GLX_EXT_Swap_control) doc, found here: https://registry.khronos.org/OpenGL/extensions/EXT/GLX_EXT_swap_control_tear.txt, in the "Additions to the GLX 1.4 Specification" that "The value returned by glXQueryDrawable is undefined if the drawable is not a GLXWindow and these attributes are given.". Even though glXQueryDrawable() takes in a GLXDrawable and NOT a GLXWindow, the extension docs here suggest that it would result in undefined behaviour if we used a normal X Window (which would compile) and not a GLXWindow. In any case, it's safer to just use a GLXWindow.

- <p>Confusignly, GLX provides two functions glXCreateContext() and also glXCreateNewContext() which seem like they are what should be used for context creation, but they aren't. These functions are only for legacy old openGl, not for modern core OpenGL, so they should be ignored. Instead, we need an <i>extension</i> function: glXCreateContextAttribsARB(), which we need to query for with get proc address. It's confusing, but historical reasons have made it this way. The short story is that in the development of OpenGL, modern OpenGL was basically "hacked" into old GL as extensions, and so even today, the process of creating an OpenGL context is very confusing. You have to be careful to determine what functions or documentation is for legacy or for modern GL, and there's not always a clear indication (as is the case with GLX). Not only that, but a mix of old and new extension functions are required, and it's not at all clear how to mix and match them. This is all just to say that I have taken care of this, so don't worry, I'll fill you in on every detail and nuance that you need to be made aware of.</p>


</div>


    </div>

  </body>
</html>
